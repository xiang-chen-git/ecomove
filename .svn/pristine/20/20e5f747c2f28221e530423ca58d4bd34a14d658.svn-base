##' State probabilities 
##' 
##' Get the probability of being in each state for multi-state chains for every step in the track. If the data used
##' to fit the JAGS model is provided (a data frame generated by \code{GetVT} in \code{\link[bcpa:bcpa-package]{bcpa}}), then a data frame containing the state 
##' probabilities and time for each step in the track is returned. Otherwise, just the matrix of states is returned.
##' 
##' 
##' @param jagsResults An \code{\link[=rjags-class]{rjags}} result
##' @param data (optional) The data used to fit the \code{jagsResults} containing a \code{T.POSIX} column.
##' @return Return matrix of (or data frame including time) state probabilities for each step


getStateProbabilities <- function(jagsResults, data = NULL)
{
	if(class(jagsResults) != "rjags") stop("jagsResults parameter must be an rjags object")
	if(!("idx" %in% jagsResults$parameters.to.save)) stop("Must record idx parameter to get states")
	
	idxArray <- .getIdxArray(jagsResults)
	
	nstates <- length(unique(as.vector(idxArray)))
	ndata <- dim(idxArray)[3] # 3rd dim of array are parameters
	
	probabilities <- matrix(NA, nrow = ndata, ncol = nstates)
	
	for (i in 1:nstates)
	{
	  probabilities[,i] <- apply(idxArray, 3, function(x) sum(x == i))
	}
	probabilities <- probabilities / rowSums(probabilities)
	
	if ( !is.null(data) )
	{
	  if (nrow(data) != nrow(probabilities)) stop("Provided data must be same length as data used to fit jagsResults object")
	  probabilities <- data.frame(State = probabilities, Time = data$T.POSIX)
	}
	
	return(probabilities)
}
