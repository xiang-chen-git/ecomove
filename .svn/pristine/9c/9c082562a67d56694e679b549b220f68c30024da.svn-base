{
    "contents" : "#' Perform window sweep for BCPA\n#'\n#' This is the workhorse function of the BCPA.  It performs a sweep of the time series, searching for most significant change points and identifying the parsimonious model according to an adjusted BIC.\n#'\n#' @param data the data to be analyzed.  Most typically, output of the \\code{\\link{GetVT}} function containing step lengths, absolute and turning angles, etc.\n#' @param variable a character string representing the response to apply the BCPA to.  For example \\code{\"V*cos(theta)\"}  for persistence velocity, or \\code{\"log(V)\"} for log of velocity. \n#' @param windowsize integer size of the analysis window as a number of data points (not time units).  Should probably be no smaller than 20. \n#' @param windowstep integer step size of analysis. Values greater than 1 speed the analysis up. \n#' @param K senstivity parameter for the adjusted BIC.  Smaller values make for a less sensitive model selection, i.e. more likely that the null model of no significant changes will be selected.\n#' @param tau a logical indicating whether the autocorrelation \"rho\" or the characteristic time \"tau\" should be estimated. \n#' @param range a number between 0 and 1 that determines the extent of each window that is scanned for changepoints.  I.e., if the window is 100 datapoints long, at the default \\code{range=0.6}, changepoints will be scanned between 20 and 80. \n#' @param progress logical - whether or not to output a progress bar as the analysis is being performed. \n#' @param plotme logical - whether or not to plot the analysis as it is happening.  This slows the analysis considerably, especially in non-dynamic graphic environments like RStudio.   \n#' @param ... additional parameters to be passed to the \\code{\\link{PartitionParameters}} function.\n#' \n#' @return an object of class \\code{windowsweep}, which is a list containing: \n#' \\item{ws}{a data frame containing the change point, selected model, and parameter estimates} \n#' \\item{x}{the response variable} \n#' \\item{t}{the time variable - in the units specified in the data object} \n#' \\item{t.POSIX}{the time variable as a POSIX objects (contianing Y-M-D H:S)} \n#' \\item{windowsize}{the window size}\n#' \\item{windowstep}{the window step size}\n#' \n#' @seealso  for internal functions: \\code{\\link{GetModels}}, \\code{\\link{GetBestBreak}}, \\code{\\link{GetDoubleL}}; for summarizing output: \\code{\\link{ChangePointSummary}}; for plotting output: \\code{\\link{plot.bcpa}}\n#' @author Eliezer Gurarie\n#' @examples\n#' data(Simp)\n#' plot(Simp)\n#' Simp.VT <- GetVT(Simp)\n#' Simp.ws <- WindowSweep(Simp.VT, \"V*cos(Theta)\", windowsize = 50, windowstep = 1, progress=TRUE)\n#' plot(Simp.ws, threshold=7)\n#' plot(Simp.ws, type=\"flat\", clusterwidth=3)\n#' PathPlot(Simp, Simp.ws)\n#' PathPlot(Simp, Simp.ws, type=\"flat\")\n#' DiagPlot(Simp.ws)\n\nWindowSweep <- function (data, variable, windowsize = 50, windowstep = 1, K = 2, tau=TRUE, range=0.6, progress = TRUE, plotme=FALSE, ...) \n{\n  x <- eval(parse(text = variable), data)\n  t <- data$T.mid\n  \n  low <- seq(1, (length(t) - windowsize), windowstep)\n  hi <- low + windowsize\n  if(progress)\n    pb <- txtProgressBar(min = 0, max = length(low), style = 3)\n  \n  for (i in 1:length(low)) {\n    myx <- x[low[i]:hi[i]]\n    myt <- t[low[i]:hi[i]]\n    myestimate <- GetBestBreak(myx, myt, range, tau = tau)\n    \n    breakpoint <- myestimate[1]\n    tbreak <- myestimate[2]\n    allmodels <- GetModels(myx, myt, breakpoint, K, tau)\n    \n    # remember, column 3 is \"bic\"\n    mymodel <- allmodels[allmodels[,3] == min(allmodels[,3]),]\n    mymodel <- c(mymodel, Break = tbreak)\n    \n    if(i == 1)\n      estimates <- mymodel\n    else\n      estimates <- rbind(estimates, mymodel)\n    \n    if(plotme)\n    {\n      plot.ts(t, x, type = \"l\", col = \"grey\")\n      lines(t, x, type = \"l\")\n      lines(myt, myx, col = \"green\")\n      abline(v = tbreak)\n    }\n    \n    # create progress bar\n    if(progress & i %% 10 == 0) setTxtProgressBar(pb, i)\n  }\n  if(progress) close(pb)\n  windowsweep <- list(ws = data.frame(estimates, row.names=1:nrow(estimates)), \n                      x=x, t=t, t.POSIX = data$T.POSIX, windowsize=windowsize, windowstep=windowstep)\n  \n  windowsweep$pp.smooth <- PartitionParameters(windowsweep, type=\"smooth\", ...) \n  class(windowsweep) <- \"bcpa\"\n  return(windowsweep)\n}",
    "created" : 1414905784071.000,
    "dirty" : false,
    "encoding" : "KOI8-R",
    "folds" : "",
    "hash" : "1041088423",
    "id" : "8FFFC9A0",
    "lastKnownWriteTime" : 1382163002,
    "path" : "~/programming/ecomove/bcpa/bcpa/R/WindowSweep.R",
    "project_path" : "R/WindowSweep.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}