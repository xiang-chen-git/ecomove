{
    "contents" : "#' Correlated velocity movement: Exact Updating \n#' \n#' Simulates 2D correlated velocity movement model for arbitrary time intervals, using the \"exact\" updating formulae of Gillespie (1996). \n#'\n#' @aliases getX, getSigma\n#' @details This function simulates a CVM explicitly using the governing OU equation, using a discretization in which dt << tau.   It is used primarily to simulate \"true\" trajectories against which other simulation/estimation routines can be tested. \n#' @param T vector of times\n#' @param nu mean speed of movement\n#' @param tau characteristic time scale of movement\n#' @param v0 initial velocity vector.  Default is randomly oriented vector with magnitude \\code{nu}\n#' @param z0 inital location.  Default 0. \n#' @return a list with the following elements \\describe{\\item{T}{the time vector} \\item{V}{the (complex) vector of velocities} \\item{Z}{the (complex) vector of locations} \\item{X}{a 4xn matrix containing columns for, respectively, Vi, Zi, Vj and Zj where i and j refer to the x and y coordinates of the movement} \\item{dt, tau, nu,vo}{the parameters of the model.}}\n#' @examples\n #' # sampling 100 random times up to (about) 1000:\n #' T <- cumsum(rexp(100)*10) \n #' # Simulate\n #' cvm2 <- CVM2(T, nu=2, tau=5)\n #' # Illustrate\n #' layout(rbind(c(1,3,3,2), c(1,4,4,2)))\n #' par(bty=\"l\", oma=c(0,0,4,0))\n #' plot(cvm2$V, type=\"l\", asp=1, main=\"Velocity\", xlab=\"\", ylab=\"\", col=\"darkgrey\")\n #' points(cvm2$V, pch=19, cex=0.5)\n #' plot(cvm2$Z, type=\"l\", main=\"Position\", asp=1, col=\"darkgrey\")\n #' points(cvm2$Z, pch=19, cex=0.5)\n #' plot(cvm2$T, Re(cvm2$V), col=2, type=\"l\", main=\"Velocity (decomposed)\", ylim=range(c(Re(cvm2$V), Im(cvm2$V))))\n #' lines(cvm2$T, Im(cvm2$V), col=3, type=\"l\")\n #' plot(cvm2$T, Re(cvm2$Z), col=2, type=\"l\", main=\"Position (decomposed)\", ylim=range(c(Re(cvm2$Z), Im(cvm2$Z))))\n #' lines(cvm2$T, Im(cvm2$Z), col=3, type=\"l\")\n #' title(\"CVM(2, 5): 0-1000, 100 random samples\", outer=TRUE, cex=1.5)\n\nCVM2 <-\n  function(T, nu = 1, tau = 1, v0 = nu * exp((0+1i) * runif(1, 0, 2 * pi)))\n  {\n    X <- matrix(c(Re(v0), 0, Im(v0), 0), nrow=1)\n        \n    if(T[1]!=0) T <- c(0,T)\n    \n    dT <- diff(T)\n    \n    for(i in 1:length(T[-1]))\n      X <- rbind(X, getX(X[i,], dT[i], nu, tau))\n    \n    V <- X[,1]+1i*X[,3]\n    Z <- X[,2]+1i*X[,4]\n   return(list(T = T[-1], V = V[-1], Z = Z[-1], X = X[-1], tau = tau, nu = nu, v0 = v0))\n  }\n\n\ngetX <-\n  function(x, dt, nu, tau)\n  {\n    kappa <- exp(-dt/tau)\n    Sigma <- matrix(0,nrow=4,ncol=4)\n    Sigma[1:2,1:2] <- getSigma(dt, nu, tau)\n    Sigma[3:4,3:4] <- getSigma(dt, nu, tau)\n    \n    #Sigma <- bdiag(list(getSigma(dt, nu, tau), getSigma(dt, nu, tau)))\n    \n    mu <- c(x[1] * kappa, \n            x[2] + x[1]*tau*(1-kappa), \n            x[3] * kappa, \n            x[4] + x[3]*tau*(1-kappa))\n    \n    mvrnorm2(n = 1, mu, Sigma)\n  }\n\n\ngetSigma <-\n  function(dt, nu, tau)\n  {\n    kappa <- exp(-dt/tau)\n    varV <- (2*nu^2 / pi) * (1 - kappa^2)\n    covVX <- (2*nu^2 * tau / pi) * (1 - kappa)^2\n    varX <- (4*nu^2 * tau^2/ pi) * (dt/tau - 2*(1 - kappa) + (1-kappa^2)/2)\n    rbind(c(varV, covVX), c(covVX, varX))\n  }\n\nmvrnorm2 <- function (n = 1, mu, Sigma, tol = 1e-06, empirical = FALSE) \n{\n  p <- length(mu)\n  if (!all(dim(Sigma) == c(p, p))) \n    stop(\"incompatible arguments\")\n  eS <- eigen(Sigma, symmetric = TRUE, EISPACK = FALSE)\n  ev <- eS$values\n  if (!all(ev >= -tol * abs(ev[1L]))) \n    stop(\"'Sigma' is not positive definite\")\n  X <- matrix(rnorm(p * n), n)\n  X <- drop(mu) + eS$vectors %*% diag(sqrt(pmax(ev, 0)), p) %*% \n    t(X)\n  nm <- names(mu)\n  if (is.null(nm) && !is.null(dn <- dimnames(Sigma))) \n    nm <- dn[[1L]]\n  dimnames(X) <- list(nm, NULL)\n  if (n == 1) \n    drop(X)\n  else t(X)\n}\n\n",
    "created" : 1419277470872.000,
    "dirty" : false,
    "encoding" : "WINDOWS-1252",
    "folds" : "",
    "hash" : "2485366207",
    "id" : "ADC5E5C8",
    "lastKnownWriteTime" : 1416805056,
    "path" : "~/Documents/ecomove/cvm/cvm/R/CVM2.R",
    "project_path" : "R/CVM2.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}